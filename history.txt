git status -> mirar el status de elementos de la carpeta (rojo ó verde)
git add history.txt
git rm --cached history.txt  ## elimiar elemento del add -> en el status vulve a aparecer en rojo

git config
git config --list  ## lista de configuraciones de git
git config --list --show-origin

git config --global user.name  ## cambiar configuracion
git config --global user.email ## cambiar correo

git log history.txt  ## ver historial del archivo
git log --stat ## ver cambios especificos apartir del commit
git log --all  ## muestra todos los logs
git log --all --graph  ## muestra el arbol de logs
git log --all --graph --decorate --oneline  ## visualización de los en vista amigable
## crear aliaspara ver el arbol decorado oneline
alias arbol="git log --all --graph --decorate --oneline"


git show   ## cambios que han existido sobre un archivo

git diff ## ver las diferencias entre actual y staging
git diff cb0ebb53f11f22d6468240612904d1bb43a653d8 954566c5c0255fad6d116cfd4b189f40918f8559 ## ver la diferencia entre 2 commit

git reset 5a7db21d554566a924bc9885a5a7753b393bb85d --hard ## todo vuelve al estado anterior
git reset 5a7db21d554566a924bc9885a5a7753b393bb85d --soft ## se vuelve a la versión sin tener en cuenta el staging

git checkout 98e9d7da700023d8a939567297099d1a28e0f02b history.txt  ## ver el archivo en un commit específico
git checkout master history.txt  ## volver a la última versión

git branch cabecera    ## creación de una rama  -> sigue parado en el master pero apuntando a 2 ramas master y cabecera(git show)
git branch  ## muestra las ramas que tenga

git checkout cabecera  ## moverme entre ramas

## desde master hago merge
git merge cabecera

git commit -am "add y commit juntos. no funciona en archivos nuevos"

## agregar un remoto
git remote add origin https://github.com/wilfredoha/platzi.git
git remote ## 
git remote -v ## muestra el remoto del que se hace push o pull

git pull origin master
git pull origin master --allow-unrelated-histories ## fucionar lo que hay en el remoto con la rama local

git push origin master

## SSH
ssh-keygen -t rsa -b 4096 -C "wilfredoholguin76@gmail.com" ## creacion de llaves SSH
## la llave se crea en la carpeta .ssh del usuario

eval $(ssh-agent -s)  ## validar que está activo el agente ssh

cd ~/.ssh ## nos vamos a la carpeta que contiene las llaves
cd 
ssh-add ~/.ssh/id_rsa   ## agregar la llave privada
## cambiar el remoto por ssh
git remote set-url origin git@github.com:wilfredoha/platzi.git

#################################################
## CREACION DE TAGS
1. Se copia el id 4ef8802
2c8c2b0

git tag -a v0.1 -m "Resultado de las primeras clases" 2c8c2b0
git tag muestra los tag que tengo
git show-ref --tags ## saber a que commit está conectado un tag

los tags son útiles en GitHuB
git push origin --tags  ## enviar tags a GitHub

el tag me hace referenacia al commit con el que se creo el tag en git

git tag -d XYZ  ## no borra el tag en GutHub de manera permanente

git push origin :refs/tags/XYZ   ## elimina le tag de GitHub de manera permanente
#################################################

## ver más información de las ramas
git show-branch       
git show-branch --all

gitk  ## versión visual -- permite ver en una aplicación los detalles del repositorio

## desde cabecera
git push origin cabecera

## crea otra fuente nueva para traer datos
git remote add upstream https://github.com/wilfredoha/platzi.git
git remote -v

## rebase -> agarrar una rama entera y pegarla de regreso a la rama maestra -> es una mala practica para enviar a repositorios remotos. 
git rebase master -> se hace desde otra rama para pegar -> esto cambia la historia de donde arrancó el branch. TRABAJO EN LOCAL
## CAMBIO SILECIOSO. ajusta los commit y no queda historia.

## stash permite volver al cambio anterior
git stash  ## los cambios no se pierden, quedan guardados en un lugar temporal
git stahs list ## muestra el lugar donde se guardaron los cambios
git stash pop ## devuelve los cambios
git stash branch nombre_rama -> crea automaticamnte la rama y se para en ella. Se debe hacer commit para que se guarden los cambios en esa rama. -> al regresar a master no se guradan los cambios
-> forma útil de tener en temporal los cambios y poder moverse entre ramas y luego poder recuperarlos
git stash drop elimina el stash dejando el proyecto en el último commit

## lo necesito para reportes unidades y fechas
sp_detalle_con_pago_MULTIPLE_unidades_reporte